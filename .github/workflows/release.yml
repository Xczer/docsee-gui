name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.tag }}"
          else
            version="${{ github.ref_name }}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Version: $version"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}

          echo "## 🚀 What's New in $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "$VERSION" ]; then
            echo "### 📝 Changes since $LAST_TAG" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" $LAST_TAG..HEAD >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          else
            echo "- Initial release" >> RELEASE_NOTES.md
          fi

          echo "" >> RELEASE_NOTES.md
          echo "### 📦 Available Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### Linux" >> RELEASE_NOTES.md
          echo "- **AppImage**: \`docsee-gui-linux-x86_64.AppImage\` (recommended)" >> RELEASE_NOTES.md
          echo "- **DEB**: \`docsee-gui-linux-x86_64.deb\` (Ubuntu/Debian)" >> RELEASE_NOTES.md
          echo "- **RPM**: \`docsee-gui-linux-x86_64.rpm\` (Fedora/RHEL)" >> RELEASE_NOTES.md
          echo "- **ARM64**: ARM64 versions available for all formats" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### macOS" >> RELEASE_NOTES.md
          echo "- **Intel**: \`docsee-gui-macos-x86_64.dmg\`" >> RELEASE_NOTES.md
          echo "- **Apple Silicon**: \`docsee-gui-macos-aarch64.dmg\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### Windows" >> RELEASE_NOTES.md
          echo "- **MSI**: \`docsee-gui-windows-x86_64.msi\`" >> RELEASE_NOTES.md
          echo "- **Portable**: \`docsee-gui-windows-x86_64.exe\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 🔐 Verification" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "All packages include SHA256 checksums for verification." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "---" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          if [ -n "$LAST_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...$VERSION" >> RELEASE_NOTES.md
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: DocSee GUI ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: docsee-gui-linux-x86_64
            bundles: "appimage,deb,rpm"
          # Temporarily disable ARM64 until cross-compilation is fixed
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-22.04
          #   name: docsee-gui-linux-aarch64
          #   bundles: "appimage,deb,rpm"
          - target: x86_64-apple-darwin
            os: macos-latest
            name: docsee-gui-macos-x86_64
            bundles: "dmg"
          - target: aarch64-apple-darwin
            os: macos-latest
            name: docsee-gui-macos-aarch64
            bundles: "dmg"
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: docsee-gui-windows-x86_64
            bundles: "msi,nsis"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{ matrix.target }}-release-${{ hashFiles('src-tauri/Cargo.lock') }}

      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libglib2.0-dev \
            libgdk-pixbuf-2.0-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libcairo-gobject2 \
            libcairo2-dev \
            pkg-config \
            patchelf \
            rpm

      # Update version in configuration files
      - name: Update version
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          version_clean="${version#v}"

          # Update package.json
          npm version "$version_clean" --no-git-tag-version --allow-same-version

          # Update tauri.conf.json
          if command -v jq >/dev/null 2>&1; then
            jq --arg version "$version_clean" '.version = $version' src-tauri/tauri.conf.json > tmp.json
            mv tmp.json src-tauri/tauri.conf.json
          else
            sed -i.bak "s/\"version\": \"[^\"]*\"/\"version\": \"$version_clean\"/" src-tauri/tauri.conf.json
            rm -f src-tauri/tauri.conf.json.bak
          fi

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend for ${{ matrix.target }}..."
          bun run build
          echo "✅ Frontend ready"

      - name: Build Tauri app
        shell: bash
        run: |
          echo "📦 Building Tauri app for ${{ matrix.target }}..."
          
          # Standard build for all targets (ARM64 temporarily disabled)
          bun tauri build --bundles ${{ matrix.bundles }} --target ${{ matrix.target }}
          
          echo "✅ Build completed for ${{ matrix.target }}"

      - name: Collect and prepare artifacts
        shell: bash
        run: |
          mkdir -p release-artifacts
          echo "📦 Collecting artifacts for ${{ matrix.target }}..."

          # Find and copy built artifacts (following your file naming convention)
          find src-tauri/target/${{ matrix.target }}/release/bundle -type f \( \
            -name "*.AppImage" -o \
            -name "*.appimage" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.dmg" -o \
            -name "*.msi" -o \
            -name "*.exe" \
          \) -exec cp {} release-artifacts/ \;

          # Rename files to match our naming convention
          cd release-artifacts
          for file in *; do
            if [ -f "$file" ]; then
              extension="${file##*.}"
              case "$extension" in
                AppImage|appimage)
                  mv "$file" "${{ matrix.name }}.AppImage"
                  ;;
                deb)
                  mv "$file" "${{ matrix.name }}.deb"
                  ;;
                rpm)
                  mv "$file" "${{ matrix.name }}.rpm"
                  ;;
                dmg)
                  mv "$file" "${{ matrix.name }}.dmg"
                  ;;
                msi)
                  mv "$file" "${{ matrix.name }}.msi"
                  ;;
                exe)
                  mv "$file" "${{ matrix.name }}.exe"
                  ;;
              esac
            fi
          done

          # Generate checksums (following your cross-platform approach)
          for file in *; do
            if [ -f "$file" ]; then
              if command -v sha256sum >/dev/null 2>&1; then
                sha256sum "$file" > "$file.sha256"
              elif command -v shasum >/dev/null 2>&1; then
                shasum -a 256 "$file" > "$file.sha256"
              fi
            fi
          done

          echo "📋 Final artifacts:"
          ls -la

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Summary
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: success()
    steps:
      - name: Generate summary
        run: |
          echo "# 🎉 Release ${{ needs.create-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Multi-Platform Builds" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linux x64 (AppImage, DEB, RPM)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏸️ Linux ARM64 (temporarily disabled)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS Intel (DMG)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS Apple Silicon (DMG)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows x64 (MSI, NSIS)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [💾 Downloads](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY
